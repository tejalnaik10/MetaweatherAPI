package gluecode;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.Map;

import org.hamcrest.core.Is;

import cucumber.api.DataTable;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import junit.framework.Assert;
import static org.hamcrest.Matchers.*;

public class StepDefinition {
	RequestSpecification request=RestAssured.given(); 
	Response response;
	SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
	Calendar cal = Calendar.getInstance();
	
	@Given("^a rest api \"([^\"]*)\"$")
	public void a_rest_api(String baseuri) throws Throwable {
		request.baseUri(baseuri);
	//	Assert.assertEquals(response.getStatusCode(), 200);
	//	System.out.println(response.asString());
	}
	
	@When("^the system requests (GET|POST) \"([^\"]*)\"$")
	public void apiRequest(String apiMethod, String path) throws Throwable {
		response =request.get(path);
		switch (apiMethod) {
        case "GET":
            response = request.get(path);
            break;
        case "PUT":
            response = request.put(path);
            break;
        case "POST":
            response = request.post(path);
            break;
        case "PATCH":
            response = request.patch(path);
            break;
        case "DELETE":
            response = request.delete(path);
            break;
    }
		
	}
	
	@Then("^the response code is (\\d+)$")
	public void verify_status_code(int code) throws NumberFormatException, IOException{
		Assert.assertEquals(code,response.getStatusCode());
	//	System.out.println(response.asString());
	}
	
	@Then("^the response status is \"(.*)\"$")
	public void verify_status_message(String msg) throws NumberFormatException, IOException{
		Assert.assertTrue(response.statusLine().contains(msg));
	}
	
	@Then("^the response body contains <field> <Value>$")
	public void the_response_body_contains_field_Value(DataTable dt) throws Throwable {
		//response.body().
		List<Map<String, String>> list = dt.asMaps(String.class, String.class);
		for(int i=0; i<list.size(); i++) {
			   
			//Number of Days to add
		      
			//Date after adding the days to the current date
		//	String newDate = dateFormat.format(cal.getTime());  
			 cal.add(Calendar.DAY_OF_MONTH, i);
			response.then().assertThat().body(list.get(i).get("field"), Is.is(list.get(i).get("value")),
					"consolidated_weather.applicable_date["+i+"]", Is.is(dateFormat.format(cal.getTime())));//list.get(i).get("value")));
			
			
			
			
	}
	}

}
